{"version":3,"sources":["components/logoSvg/LogoSvg.svg","types.ts","slices/gameSlice.ts","slices/tablesSlice.ts","slices/clientsSlice.ts","slices/dishesSlice.ts","slices/ingredientsSlice.ts","slices/uiSlice.ts","slices/recipesSlice.ts","slices/profileSlice.ts","slices/levelsSlice.ts","slices/timerSlice.ts","store.ts","selectors.ts","libs/btnEffect.ts","actions.ts","components/ingredientsStore/IngredientsStore.tsx","components/recipes/Recipes.tsx","components/profile/Profile.tsx","components/clock/Clock.tsx","components/client/Client.tsx","libs/areIngredientsEqual.ts","components/table/Table.tsx","components/diner/Diner.tsx","components/dish/Dish.tsx","components/kitchen/Kitchen.tsx","components/combo/Combo.tsx","components/board/Board.tsx","components/restartpage/Restartpage.tsx","index.tsx"],"names":["module","exports","ClientStatus","VisibleModalType","GameStatus","initialState","status","FIRST_STOP","tables","nextTableTime","combo","slice","createSlice","name","reducers","selectStatus","state","action","payload","startgame","PLAY","currentTime","togglePausegame","extraReducers","createAction","type","concatValues","l","r","Array","isArray","concat","data","t1","id","t2","t3","clients","ids","removeTable","tableId","filter","addTable","mergeDeepWith","removeTables","tablesIds","forEach","gameSlice","actions","c1","WIP","coins","createdAt","liveTime","c2","c3","c4","c5","recipes","updateStatus","clientId","updateStatuses","clientIds","setOk","OK","setKo","KO","_","tablesSlice","clientsIds","includes","d1","isSelected","d2","ingredients","addIngredient","dishId","ingredientId","push","clear","copy","selectedDishId","ingredientsIds","select","unselect","dishesIds","map","reduce","prev","curr","clientsSlice","donut","oreo","kitkat","modalType","RESTARTPAGE","selectedRecipeId","selectVisibleModalType","closeIngredientsStore","NONE","showIngredientsStore","INGREDIENTS_STORE","showRecipes","recipeId","RECIPES","dishesSlice","lives","levelId","selectLevel","decreaseLives","increseCoins","dishes","maxClients","maxTables","timePerIngredient","isLock","randomTables","unlockLevel","level","set","reducer","combineReducers","ingredientsSlice","ui","uiSlice","recipesSlice","profile","profileSlice","levels","levelsSlice","game","timer","timerSlice","configureStore","middleware","getDefaultMiddleware","selectDishesIds","createSelector","dishesData","Object","values","selectDish","dish","selectTablesIds","reverse","selectClients","tablesData","selectLevelIngredientsIds","levelsRecipes","recipeIngredients","from","Set","flatMap","selectClient","client","selectClientRecipe","recipe","selectClientIngredients","recipesIngredients","ingredientsData","clientWiggleEffect","elSelector","gsap","timeline","to","rotation","ease","repeat","yoyo","btnEffect","onComplete","event","killTweensOf","currentTarget","y","Date","now","checkForEndgame","dispatch","getState","batch","LOSE_STOP","length","nextLevel","keys","WIN_STOP","checkRemoveClientTable","tableClientsIds","every","opacity","delay","createTable","uuid","clientsRandom","Math","floor","random","recipeRandom","maxLiveTime","max","fromTo","PAUSE","window","setInterval","store","clientsIdsToRemove","c","join","setTimeout","mapDispatchToProps","chooseIngredient","connector","connect","isVisible","ingredientsStoreClass","classnames","className","key","onClick","ingredientsList","hideRecipes","recipesClass","ingredient","index","ownProps","isWaiting","getStyle","strokeDasharray","viewBox","transform","cx","cy","style","chooseClient","areEqual","ingrediensIds0","ingredientsIds1","orederdIngredienstIds0","sort","orederdIngredienstIds1","IngredientId","areIngredientsEqual","clientStatusClass","onClickAttr","clientRecipeEl","clientsList","tablesList","chooseDish","hasIngredients","Boolean","selectIngredients","defaultIngredientsIds","makeSelectIngredients","selectRecipeId","dishIngredientsIds","recipesIngredientsIds","sortedDishIngredientsIds","entries","find","ingredientsEl","maxIngredientsPerDish","clearDish","dishesList","comboTxt","el","useRef","useEffect","current","scale","display","comboEffect","toLowerCase","ref","src","LogoSvg","alt","startgameLavel","currentLevelId","isPaused","isFirst","isStart","isEndgame","levelsNum","startpageClass","PrevLevelBtn","memo","setLocalLevelId","localLevelId","NextLevelBtn","playBtnClass","PlayBtn","LevelTxt","ResumeBtn","LogoGame","Coins","useState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f02a5ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoSvg.cd51aafe.svg\";","import { ThunkAction, ThunkDispatch } from 'redux-thunk'\nimport { Action } from '@reduxjs/toolkit'\n\nimport { reducer } from \"./store\";\n\nexport enum ClientStatus {\n  WIP,\n  OK,\n  KO,\n};\n\nexport type TTimer = {\n  currentTime: number,\n};\n\nexport type TTable = {\n  id: string,\n};\n\nexport type TTables = {\n  data: { [key: string]: TTable },\n  clients: { [key: string]: string[] },\n  ids: string[],\n};\n\nexport type TClient = {\n  id: string,\n  status: ClientStatus,\n  coins: number,\n  createdAt: number,\n  liveTime: number,\n};\n\nexport type TClients = {\n  data: { [key: string]: TClient },\n  recipes: { [key: string]: string },\n  ids: string[],\n  tables: { [key: string]: string },\n};\n\nexport type TDish = {\n  id: string,\n  isSelected: boolean,\n};\n\nexport type TDishes = {\n  data: { [key: string]: TDish },\n  ids: string[],\n  ingredients: { [key: string]: string[] },\n};\n\nexport type TIngredient = {\n  id: string,\n};\n\nexport type TIngredients = {\n  data: { [key: string]: TIngredient },\n  ids: string[],\n};\n\nexport enum VisibleModalType {\n  NONE,\n  INGREDIENTS_STORE,\n  RECIPES,\n  RESTARTPAGE,\n};\n\nexport type TUi = {\n  modalType: VisibleModalType,\n  selectedRecipeId: string | null,\n  selectedDishId: string | null,\n};\n\nexport type TRecipe = {\n  id: string,\n};\n\nexport type TRecipes = {\n  data: { [key: string]: TIngredient },\n  ingredients: { [key: string]: string[] },\n};\n\nexport enum GameStatus {\n  FIRST_STOP,\n  LOSE_STOP,\n  PAUSE,\n  PLAY,\n  WIN_STOP,\n};\n\nexport type TProfile = {\n  lives: number,\n  coins: number,\n  levelId: number,\n};\n\nexport type TLevel = {\n  id: string,\n  dishes: number,\n  lives: number,\n  maxClients: number,\n  maxTables: number,\n  timePerIngredient: number,\n  isLock: boolean,\n  randomTables: boolean,\n};\n\nexport type TLevels = {\n  data: { [key: string]: TLevel },\n  recipes: { [key: string]: string[] },\n};\n\nexport type TGame = {\n  status: GameStatus,\n  tables: number,\n  nextTableTime: number,\n  combo: number,\n};\n\nexport type TState = ReturnType<typeof reducer>;\n\nexport type TThunk<R> = ThunkAction<R, TState, null, Action<string>>;\n\nexport type TThunkDispatch = ThunkDispatch<TState, null, Action<string>>;\n","import { createSlice, PayloadAction, createAction } from '@reduxjs/toolkit';\n\nimport { TGame, GameStatus, VisibleModalType } from '../types';\nimport { TAddTableProps } from './tablesSlice';\n\nconst initialState: TGame = {\n  status: GameStatus.FIRST_STOP,\n  tables: 0,\n  nextTableTime: 0,\n  combo: 0,\n};\n\ntype TSelectStatusProps = {\n  status: GameStatus,\n};\n\nexport type TStartgameProps = {\n  currentTime: number,\n  lives: number,\n  dishesIds: string[],\n  levelId: number,\n};\n\nexport type TToggleResumegameProps = {\n  status: GameStatus,\n  modalType: VisibleModalType,\n};\n\nconst slice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    selectStatus(\n      state,\n      action: PayloadAction<TSelectStatusProps>\n    ) {\n      state.status = action.payload.status;\n    },\n\n    startgame(\n      state,\n      action: PayloadAction<TStartgameProps>,\n    ): TGame {\n      return {\n        status: GameStatus.PLAY,\n        tables: 0,\n        nextTableTime: action.payload.currentTime + 2000,\n        combo: 0,\n      };\n    },\n\n    togglePausegame(\n      state,\n      action: PayloadAction<TToggleResumegameProps>,\n    ) {\n      state.status = action.payload.status;\n    },\n  },\n  extraReducers: {\n    [createAction('tables/addTable').type](\n      state,\n      action: PayloadAction<TAddTableProps>,\n    ) {\n      state.tables += 1;\n      state.nextTableTime = action.payload.nextTableTime;\n    },\n\n    [createAction('clients/setOk').type](state) {\n      state.combo = state.combo < 2\n        ? 2\n        : state.combo;\n      state.combo += 1;\n    },\n\n    [createAction('clients/setKo').type](state) {\n      state.combo = state.combo === 2\n        ? 1\n        : 2;\n    },\n\n    [createAction('clients/updateStatuses').type](state) {\n      state.combo = state.combo === 2\n        ? 1\n        : 2;\n    },\n  },\n});\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { mergeDeepWith, concat } from 'ramda';\n\nimport { TTables, TClients } from '../types';\nimport gameSlice from './gameSlice';\n\nconst concatValues = (l: any, r: any) =>\n  Array.isArray(l) ? concat(l, r) : r;\n\nconst initialState: TTables = {\n  data: {\n    t1: {\n      id: 't1',    },\n    t2: {\n      id: 't2',\n    },\n    t3: {\n      id: 't3',\n    },\n  },\n  clients: {\n    t1: ['c1', 'c2'],\n    t2: ['c3'],\n    t3: ['c4', 'c5'],\n  },\n  ids: ['t1', 't2', 't3']\n};\n\ntype TRemoveTableProps = {\n  tableId: string,\n};\n\nexport type TAddTableProps = {\n  tables: TTables,\n  clients: TClients,\n  nextTableTime: number,\n};\n\nexport type TRemoveTablesProps = {\n  tablesIds: string[],\n  clientsIds: string[],\n};\n\nconst slice = createSlice({\n  name: 'tables',\n  initialState,\n  reducers: {\n    removeTable(state, action: PayloadAction<TRemoveTableProps>) {\n      const tableId = action.payload.tableId;\n\n      delete state.data[tableId];\n      delete state.clients[tableId];\n      state.ids = state.ids.filter(id => tableId !== id);\n\n      return state;\n    },\n\n    addTable(\n      state,\n      action: PayloadAction<TAddTableProps>,\n    ) {\n      return mergeDeepWith(\n        concatValues,\n        state,\n        action.payload.tables,\n      );\n    },\n\n    removeTables(state, action: PayloadAction<TRemoveTablesProps>) {\n      const tableIds = action.payload.tablesIds;\n\n      tableIds.forEach(tableId => {\n        delete state.data[tableId];\n        delete state.clients[tableId];\n        state.ids = state.ids.filter(id => tableId !== id);\n      });\n\n      return state;\n    },\n  },\n  extraReducers: {\n    [gameSlice.actions.startgame.type](state) {\n      return {\n        data: {},\n        clients: {},\n        ids: [],\n      };\n    },\n  },\n});\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { mergeDeepWith, concat } from 'ramda';\n\nimport { TClients, ClientStatus } from '../types';\nimport gameSlice, { TStartgameProps } from './gameSlice';\nimport tablesSlice, {\n  TRemoveTablesProps,\n  TAddTableProps,\n} from './tablesSlice';\n\nconst concatValues = (l: any, r: any) =>\n  Array.isArray(l) ? concat(l, r) : r;\n\nconst initialState: TClients = {\n  data: {\n    c1: {\n      id: 'c1',\n      status: ClientStatus.WIP,\n      coins: 100,\n      createdAt: 0,\n      liveTime: 5000,\n    },\n    c2: {\n      id: 'c2',\n      status: ClientStatus.WIP,\n      coins: 100,\n      createdAt: 0,\n      liveTime: 5000,\n    },\n    c3: {\n      id: 'c3',\n      status: ClientStatus.WIP,\n      coins: 100,\n      createdAt: 0,\n      liveTime: 5000,\n    },\n    c4: {\n      id: 'c4',\n      status: ClientStatus.WIP,\n      coins: 100,\n      createdAt: 0,\n      liveTime: 5000,\n    },\n    c5: {\n      id: 'c5',\n      status: ClientStatus.WIP,\n      coins: 100,\n      createdAt: 0,\n      liveTime: 5000,\n    },\n  },\n  recipes: {\n    c1: 'donut-kitkat',\n    c2: 'donut-kitkat',\n    c3: 'donut-oreo',\n    c4: 'donut-oreo',\n    c5: 'donut-kitkat',\n  },\n  ids: ['c1', 'c2', 'c3', 'c4', 'c5'],\n  tables: {\n    c1: 't1',\n    c2: 't1',\n    c3: 't2',\n    c4: 't3',\n    c5: 't3',\n  }\n};\n\ntype TUpdateStatusProps = {\n  status: ClientStatus,\n  clientId: string,\n};\n\ntype TUpdateStatusesProps = {\n  status: ClientStatus,\n  clientIds: string[],\n};\n\nexport type TSetOkProps = {\n  clientId: string,\n  dishId: string,\n};\n\nconst slice = createSlice({\n  name: 'clients',\n  initialState,\n  reducers: {\n    updateStatus(state, action: PayloadAction<TUpdateStatusProps>) {\n      const { status, clientId } = action.payload;\n\n      state.data[clientId].status = status;\n    },\n\n    updateStatuses(\n      state,\n      action: PayloadAction<TUpdateStatusesProps>,\n    ) {\n      const { status, clientIds } = action.payload;\n\n      clientIds.forEach(clientId => {\n        state.data[clientId].status = status;\n      });\n    },\n\n    setOk(\n      state,\n      action: PayloadAction<TSetOkProps>,\n    ) {\n      const clientId = action.payload.clientId;\n\n      state.data[clientId].status = ClientStatus.OK;\n    },\n\n    setKo(\n      state,\n      action: PayloadAction<TSetOkProps>,\n    ) {\n      const clientId = action.payload.clientId;\n\n      state.data[clientId].status = ClientStatus.KO;\n    },\n  },\n  extraReducers: {\n    [gameSlice.actions.startgame.type](\n      _,\n      action: PayloadAction<TStartgameProps>,\n    ): TClients {\n      return {\n        data: {},\n        recipes: {},\n        ids: [],\n        tables: {},\n      };\n    },\n\n    [tablesSlice.actions.removeTables.type](\n      state,\n      action: PayloadAction<TRemoveTablesProps>,\n    ) {\n      const clientsIds = action.payload.clientsIds;\n\n      clientsIds.forEach(id => {\n        delete state.data[id];\n        delete state.recipes[id];\n        delete state.tables[id];\n      });\n\n      state.ids = state.ids\n        .filter(id => !clientsIds.includes(id));\n    },\n\n    [tablesSlice.actions.addTable.type](\n      state,\n      action: PayloadAction<TAddTableProps>,\n    ) {\n      return mergeDeepWith(\n        concatValues,\n        state,\n        action.payload.clients,\n      );\n    }\n  },\n});\n\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { TDishes, TDish } from '../types';\nimport gameSlice, { TStartgameProps } from './gameSlice';\nimport clientsSlice, { TSetOkProps } from './clientsSlice';\n\nconst initialState: TDishes = {\n  data: {\n    d1: {\n      id: 'd1',\n      isSelected: false,\n    },\n    d2: {\n      id: 'd2',\n      isSelected: false,\n    },\n  },\n  ids: ['d1', 'd2'],\n  ingredients: {\n    d1: ['donut', 'kitkat', 'oreo'],\n    d2: ['oreo', 'donut'],\n  }\n};\n\ntype TAddIngredientProps = {\n  dishId: string,\n  ingredientId: string,\n};\n\ntype TClearProps = {\n  dishId: string,\n};\n\ntype TCopyProps = {\n  dishId: string,\n  selectedDishId: string,\n};\n\nexport type TSelectProps = {\n  dishId: string,\n};\n\nconst slice = createSlice({\n  name: 'dishes',\n  initialState,\n  reducers: {\n    addIngredient(state, action: PayloadAction<TAddIngredientProps>) {\n      const { dishId, ingredientId } = action.payload;\n\n      state.ingredients[dishId] = state.ingredients[dishId] || [];\n      state.ingredients[dishId].push(ingredientId);\n    },\n\n    clear(state, action: PayloadAction<TClearProps>) {\n      const dishId = action.payload.dishId;\n\n      state.ingredients[dishId] = [];\n      state.data[dishId].isSelected = false;\n    },\n\n    copy(state, action: PayloadAction<TCopyProps>) {\n      const {\n        dishId,\n        selectedDishId,\n      } = action.payload;\n      const ingredientsIds = state.ingredients[selectedDishId];\n\n      state.ingredients[dishId] =\n        (state.ingredients[dishId] || []).concat(ingredientsIds || []);\n      state.ingredients[selectedDishId] = [];\n      state.data[selectedDishId].isSelected = false;\n    },\n\n    select(\n      state,\n      action: PayloadAction<TSelectProps>,\n    ) {\n      const dishId = action.payload.dishId;\n\n      state.data[dishId].isSelected = true;\n    },\n\n    unselect(\n      state,\n      action: PayloadAction<TSelectProps>,\n    ) {\n      const dishId = action.payload.dishId;\n\n      state.data[dishId].isSelected = false;\n    },\n  },\n  extraReducers: {\n    [gameSlice.actions.startgame.type](\n      _,\n      action: PayloadAction<TStartgameProps>,\n    ): TDishes {\n      const dishesIds = action.payload.dishesIds;\n      const newDishes: TDish[] = dishesIds\n        .map(dishId => ({\n          id: dishId,\n          isSelected: false,\n        }));\n\n      return {\n        data: newDishes.reduce<{ [key: string]: TDish }>((prev, curr) => {\n          prev[curr.id] = curr;\n          return prev;\n        }, {}),\n        ids: dishesIds,\n        ingredients: {},\n      };\n    },\n\n    [clientsSlice.actions.setOk.type](\n      state,\n      action: PayloadAction<TSetOkProps>,\n    ) {\n      const dishId = action.payload.dishId;\n\n      state.ingredients[dishId] = [];\n      state.data[dishId].isSelected = false;\n    },\n\n    [clientsSlice.actions.setKo.type](\n      state,\n      action: PayloadAction<TSetOkProps>,\n    ) {\n      const dishId = action.payload.dishId;\n\n      state.ingredients[dishId] = [];\n      state.data[dishId].isSelected = false;\n    },\n  },\n});\n\nexport default slice;\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { TIngredients } from '../types';\n\nconst initialState: TIngredients = {\n  data: {\n    donut: {\n      id: 'donut',\n    },\n    oreo: {\n      id: 'oreo',\n    },\n    kitkat: {\n      id: 'kitkat',\n    },\n  },\n  ids: ['donut', 'oreo', 'kitkat'],\n};\n\nconst slice = createSlice({\n  name: 'ingredients',\n  initialState,\n  reducers: {}\n});\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { TUi, VisibleModalType } from '../types';\nimport gameSlice, {\n  TStartgameProps,\n  TToggleResumegameProps,\n} from './gameSlice';\nimport dishesSlice, { TSelectProps } from './dishesSlice';\nimport clientsSlice from './clientsSlice';\n\nconst initialState: TUi = {\n  modalType: VisibleModalType.RESTARTPAGE,\n  selectedRecipeId: 'donut-oreo',\n  selectedDishId: null,\n};\n\ntype TSelectVisibleModalType = {\n  modalType: VisibleModalType,\n};\n\ntype TShowIngredientsStoreProps = {\n  dishId: string,\n};\n\ntype TShowRecipes = {\n  recipeId: string,\n};\n\nconst slice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    selectVisibleModalType(\n      state,\n      action: PayloadAction<TSelectVisibleModalType>\n    ) {\n      state.modalType = action.payload.modalType;\n    },\n\n    closeIngredientsStore(state) {\n      state.selectedDishId = null;\n      state.modalType = VisibleModalType.NONE;\n    },\n\n    showIngredientsStore(\n      state,\n      action: PayloadAction<TShowIngredientsStoreProps>,\n    ) {\n      state.selectedDishId = action.payload.dishId;\n      state.modalType = VisibleModalType.INGREDIENTS_STORE;\n    },\n\n    showRecipes(\n      state,\n      action: PayloadAction<TShowRecipes>,\n    ) {\n      state.selectedRecipeId = action.payload.recipeId;\n      state.modalType = VisibleModalType.RECIPES;\n    },\n  },\n  extraReducers: {\n    [gameSlice.actions.startgame.type](\n      _,\n      action: PayloadAction<TStartgameProps>,\n    ): TUi {\n      return {\n        selectedDishId: null,\n        selectedRecipeId: initialState.selectedRecipeId,\n        modalType: VisibleModalType.NONE,\n      };\n    },\n\n    [gameSlice.actions.togglePausegame.type](\n      state,\n      action: PayloadAction<TToggleResumegameProps>\n    ) {\n      state.modalType = action.payload.modalType;\n    },\n\n    [dishesSlice.actions.clear.type](state) {\n      state.selectedDishId = null;\n    },\n\n    [dishesSlice.actions.addIngredient.type](state) {\n      state.selectedDishId = null;\n      state.modalType = VisibleModalType.NONE;\n    },\n\n    [dishesSlice.actions.copy.type](state) {\n      state.selectedDishId = null;\n    },\n\n    [dishesSlice.actions.select.type](\n      state,\n      action: PayloadAction<TSelectProps>,\n    ) {\n      state.selectedDishId = action.payload.dishId;\n    },\n\n    [dishesSlice.actions.unselect.type](state) {\n      state.selectedDishId = null;\n    },\n\n    [clientsSlice.actions.setOk.type](state) {\n      state.selectedDishId = null;\n    },\n\n    [clientsSlice.actions.setKo.type](state) {\n      state.selectedDishId = null;\n    },\n  },\n});\n\nexport default slice;\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { TRecipes } from '../types';\n\nconst initialState: TRecipes = {\n  data: {\n    'donut-kitkat': {\n      id: 'donut-kitkat',\n    },\n    'donut-oreo': {\n      id: 'donut-oreo',\n    },\n  },\n  ingredients: {\n    'donut-kitkat': ['donut', 'kitkat'],\n    'donut-oreo': ['donut', 'oreo'],\n  }\n};\n\nconst slice = createSlice({\n  name: 'recipes',\n  initialState,\n  reducers: {}\n});\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { TProfile } from '../types';\nimport gameSlice, { TStartgameProps } from './gameSlice';\nimport clientsSlice from './clientsSlice';\n\nconst defaultLives = 1;\n\nconst initialState: TProfile = {\n  lives: defaultLives,\n  coins: 0,\n  levelId: 1,\n};\n\ntype TIncreaseCoinsProps = {\n  coins: number,\n};\n\ntype TDecreaseLivesProps = {\n  lives: number,\n};\n\ntype TSelectLevelProps = {\n  levelId: number,\n};\n\nconst slice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    selectLevel(state, action: PayloadAction<TSelectLevelProps>) {\n      state.levelId = action.payload.levelId;\n\n      return state;\n    },\n\n    decreaseLives(\n      state,\n      action: PayloadAction<TDecreaseLivesProps>,\n    ) {\n      const lives = action.payload.lives;\n\n      state.lives -= lives;\n\n      return state;\n    },\n\n    increseCoins(state, actions: PayloadAction<TIncreaseCoinsProps>) {\n      const coins = actions.payload.coins;\n\n      state.coins += coins;\n\n      return state;\n    },\n  },\n  extraReducers: {\n    [gameSlice.actions.startgame.type](\n      _,\n      action: PayloadAction<TStartgameProps>,\n    ): TProfile {\n      return {\n        coins: 0,\n        lives: action.payload.lives,\n        levelId: action.payload.levelId,\n      };\n    },\n\n    [clientsSlice.actions.setKo.type](state) {\n      state.lives -= 1;\n    },\n  }\n});\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { TLevels } from '../types';\n\nconst initialState: TLevels = {\n  data: {\n    '1': {\n      id: '1',\n      dishes: 2,\n      lives: 1,\n      maxClients: 1,\n      maxTables: 1,\n      timePerIngredient: 1000 * 60 * 60 * 10,\n      isLock: false,\n      randomTables: false,\n    },\n    '2': {\n      id: '2',\n      dishes: 2,\n      lives: 1,\n      maxClients: 2,\n      maxTables: 1,\n      timePerIngredient: 1000 * 60 * 60 * 10,\n      isLock: false,\n      randomTables: false,\n    },\n    '3': {\n      id: '3',\n      dishes: 2,\n      lives: 1,\n      maxClients: 2,\n      maxTables: 1,\n      timePerIngredient: 10000,\n      isLock: true,\n      randomTables: false,\n    },\n    '4': {\n      id: '3',\n      dishes: 2,\n      lives: 2,\n      maxClients: 3,\n      maxTables: 5,\n      timePerIngredient: 8000,\n      isLock: true,\n      randomTables: true,\n    },\n  },\n  recipes: {\n    '1': ['donut-kitkat'],\n    '2': ['donut-oreo'],\n    '3': ['donut-kitkat', 'donut-oreo'],\n    '4': ['donut-kitkat', 'donut-oreo'],\n  },\n};\n\ntype TRemoveTableProps = {\n  tableId: string,\n};\n\ntype TUnlockLevelProps = {\n  level: number,\n};\n\nconst slice = createSlice({\n  name: 'levels',\n  initialState,\n  reducers: {\n    unlockLevel(state, action: PayloadAction<TUnlockLevelProps>) {\n      state.data[action.payload.level].isLock = false;\n\n      return state;\n    }\n  }\n});\n\nexport default slice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TTimer } from '../types';\n\nconst initialState: TTimer = {\n  currentTime: 0,\n};\n\ntype TSetProps = {\n  currentTime: number,\n};\n\nconst slice = createSlice({\n  name: 'timer',\n  initialState,\n  reducers: {\n    set(state, action: PayloadAction<TSetProps>) {\n      state.currentTime = action.payload.currentTime;\n    },\n  },\n});\n\nexport default slice;\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\n\nimport clientsSlice from './slices/clientsSlice';\nimport dishesSlice from './slices/dishesSlice';\nimport tablesSlice from './slices/tablesSlice';\nimport ingredientsSlice from './slices/ingredientsSlice';\nimport uiSlice from './slices/uiSlice';\nimport recipesSlice from './slices/recipesSlice';\nimport profileSlice from './slices/profileSlice';\nimport levelsSlice from './slices/levelsSlice';\nimport gameSlice from './slices/gameSlice';\nimport timerSlice from './slices/timerSlice';\n\nexport const reducer = combineReducers({\n  clients: clientsSlice.reducer,\n  dishes: dishesSlice.reducer,\n  tables: tablesSlice.reducer,\n  ingredients: ingredientsSlice.reducer,\n  ui: uiSlice.reducer,\n  recipes: recipesSlice.reducer,\n  profile: profileSlice.reducer,\n  levels: levelsSlice.reducer,\n  game: gameSlice.reducer,\n  timer: timerSlice.reducer,\n});\n\nexport default configureStore({\n  reducer,\n  middleware: getDefaultMiddleware(),\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport { reverse } from 'ramda';\n\nimport {\n  TState,\n  TClient,\n  TDish,\n  TIngredient,\n  TTable,\n} from './types';\n\nexport const selectDishes = createSelector(\n  (state: TState) => state.dishes.data,\n  (dishesData: { [key: string]: TDish }) => Object.values(dishesData),\n);\n\nexport const selectDishesIds = (state: TState) => state.dishes.ids;\n\nexport const selectDish = createSelector(\n  (state: TState, dishId: string) => state.dishes.data[dishId],\n  (dish: TDish) => dish,\n);\n\nexport const selectTablesIds = createSelector(\n  (state: TState) => state.tables.ids,\n  (ids: string[]) => reverse(ids),\n);\n\nexport const selectTables = createSelector(\n  (state: TState) => state.tables.data,\n  (tablesData: { [key: string]: TTable }) => Object.values(tablesData),\n);\n\nexport const selectClients = createSelector(\n  (state: TState, tableId: string) =>\n    state.tables.clients[tableId] || [],\n  (clientsIds: string[]) => clientsIds,\n);\n\nexport const makeSelectIngredients = () => {\n  const defaultIngredientsIds: string[] = [];\n\n  return createSelector(\n    (state: TState, dishId: string) =>\n      state.dishes.ingredients[dishId] || defaultIngredientsIds,\n    (state: TState) => state.ingredients.data,\n    (\n      ingredientsIds: string[],\n      ingredientsData: { [key: string]: TIngredient }\n    ) => {\n      return ingredientsIds\n        .map(id => ingredientsData[id])\n        .reverse();\n    }\n  );\n};\n\nexport const selectLevelIngredientsIds = createSelector(\n  (state: TState) => state.profile.levelId,\n  (state: TState) => state.levels.recipes,\n  (state: TState) => state.recipes.ingredients,\n  (\n    levelId: number,\n    levelsRecipes: { [key: string]: string[] },\n    recipeIngredients: { [key: string]: string[] },\n  ) => Array.from(new Set(levelsRecipes[levelId]\n    .flatMap(recipeId => recipeIngredients[recipeId]))),\n);\n\nexport const selectClient = createSelector(\n  (state: TState, clientId: string) => state.clients.data[clientId],\n  (client: TClient) => client,\n);\n\nexport const selectClientRecipe = createSelector(\n  (state: TState, clientId: string) => state.clients.recipes[clientId],\n  (recipe: string) => recipe,\n);\n\nexport const selectClientIngredients = createSelector(\n  (state: TState) => state.ui.selectedRecipeId,\n  (state: TState) => state.recipes.ingredients,\n  (state: TState) => state.ingredients.data,\n  (\n    recipeId: string | null,\n    recipesIngredients: { [key: string]: string[] },\n    ingredientsData: { [key: string]: TIngredient },\n  ) => {\n    let ingredients: TIngredient[] = [];\n\n    if (recipeId) {\n      const ingredientsIds = recipesIngredients[recipeId];\n      ingredients = ingredientsIds\n        .map(id => ingredientsData[id]);\n    }\n\n    return ingredients;\n  }\n);\n\nexport const makeSelectRecipeId = () =>\n  createSelector(\n    (state: TState, dishId: string) => state.dishes.ingredients[dishId] || [],\n    (state: TState) => state.recipes.ingredients,\n    (dishIngredientsIds, recipesIngredientsIds) => {\n      const sortedDishIngredientsIds = dishIngredientsIds\n        .slice()\n        .sort();\n      const recipe = Object.entries(recipesIngredientsIds)\n        .find(([_, ingredientsIds]) =>\n          sortedDishIngredientsIds.length === ingredientsIds.length\n          && ingredientsIds\n            .slice()\n            .sort()\n            .every((ingredientId, index) =>\n              ingredientId === sortedDishIngredientsIds[index]));\n\n      return recipe ? recipe[0] : null;\n    },\n  );\n","import gsap from 'gsap';\nimport { SyntheticEvent } from 'react';\n\nexport const wiggleEffect = (onComplete: () => void) =>\n  (event: SyntheticEvent) => {\n    const timeline = gsap.timeline();\n\n    timeline\n      .to(\n        event.currentTarget,\n        .1,\n        {\n          rotation: -10,\n          ease: 'Quad.easeInOut'\n        })\n      .to(\n        event.currentTarget,\n        .1,\n        {\n          rotation: 10,\n          repeat: 3,\n          yoyo: true,\n          ease: 'Quad.easeInOut'\n        }\n      )\n      .to(\n        event.currentTarget,\n        .15,\n        {\n          rotation: 0,\n          onComplete,\n        }\n      )\n  };\n\nexport const clientWiggleEffect = (\n  elSelector: string,\n) => {\n  const timeline = gsap.timeline();\n\n  timeline\n    .to(\n      elSelector,\n      .1,\n      {\n        rotation: -10,\n        ease: 'Quad.easeInOut'\n      })\n    .to(\n      elSelector,\n      .1,\n      {\n        rotation: 10,\n        repeat: 3,\n        yoyo: true,\n        ease: 'Quad.easeInOut'\n      }\n    )\n    .to(\n      elSelector,\n      .15,\n      {\n        rotation: 0,\n      }\n    )\n};\n\nexport const btnEffect = (onComplete: () => void) =>\n  (event: SyntheticEvent) => {\n    gsap.killTweensOf(event.currentTarget);\n    gsap.to(event.currentTarget, 0, { y: 0, rotation: 0 });\n    gsap.to(\n      event.currentTarget,\n      0.1,\n      {\n        y: '0.5rem',\n        yoyo: true,\n        repeat: 1,\n        onComplete,\n      });\n  }\n\nexport const tableHideEffect = (\n  elSelector: string,\n  onComplete: () => void,\n) =>\n  gsap.to(\n    elSelector,\n    0.2,\n    {\n      y: '-8rem',\n      opacity: 0,\n      onComplete,\n      delay: 1,\n      ease: 'Quad.easeInOut',\n    });\n\nexport const tableShowEffect = (\n  elSelector: string,\n) =>\n  gsap.fromTo(\n    elSelector,\n    0.2,\n    {\n      y: '-8rem',\n      opacity: 0,\n    },\n    {\n      y: 0,\n      opacity: 1,\n      ease: 'Quad.easeInOut',\n    });\n\nexport const comboEffect = (\n  el: HTMLElement,\n) => {\n  const timeline = gsap.timeline();\n\n  timeline.fromTo(\n    el,\n    1.2,\n    {\n      scale: .5,\n      display: 'inline-block'\n    },\n    {\n      scale: 1.3,\n      ease: 'elastic'\n    });\n  timeline.to(el, 0, { display: 'none' });\n};\n","import { batch } from 'react-redux';\nimport uuid from 'uuid/v4';\nimport { SyntheticEvent } from 'react';\n\nimport {\n  TThunk,\n  ClientStatus,\n  TClients,\n  TTables,\n  TLevel,\n  VisibleModalType,\n  GameStatus,\n} from './types';\nimport dishesSlice from './slices/dishesSlice';\nimport uiSlice from './slices/uiSlice';\nimport clientsSlice from './slices/clientsSlice';\nimport tablesSlice from './slices/tablesSlice';\nimport profileSlice from './slices/profileSlice';\nimport gameSlice from './slices/gameSlice';\nimport levelsSlice from './slices/levelsSlice';\nimport timerSlice from './slices/timerSlice';\nimport store from './store';\nimport {\n  btnEffect,\n  wiggleEffect,\n  tableHideEffect,\n  tableShowEffect,\n  clientWiggleEffect,\n} from './libs/btnEffect';\nimport areIngredientsEqual from './libs/areIngredientsEqual';\n\nlet currentTime = Date.now();\n\nexport const chooseDish = (\n  dishId: string,\n  event: SyntheticEvent,\n): TThunk<void> =>\n  (dispatch, getState) => {\n    const { dishes, ui } = getState();\n    const isSelected = dishes.data[dishId].isSelected;\n\n    if (!isSelected) {\n      const selectedDishId = ui.selectedDishId;\n\n      if (selectedDishId) {\n        dispatch(dishesSlice.actions.copy({\n          dishId,\n          selectedDishId,\n        }));\n\n        wiggleEffect(() => { })(event);\n      }\n\n      if (!selectedDishId) {\n        const ingredientsIds = dishes.ingredients[dishId] || [];\n        const hasIngredients = Boolean(ingredientsIds.length);\n\n        if (hasIngredients) {\n          btnEffect(() =>\n            dispatch(dishesSlice.actions.select({\n              dishId,\n            }))\n          )(event);\n        }\n\n        if (!hasIngredients) {\n          btnEffect(() =>\n            dispatch(uiSlice.actions.showIngredientsStore({\n              dishId,\n            }))\n          )(event);\n        }\n      }\n    }\n\n    if (isSelected) {\n      btnEffect(() =>\n        dispatch(dishesSlice.actions.unselect({\n          dishId,\n        }))\n      )(event);\n    }\n  };\n\nexport const chooseIngredient = (ingredientId: string): TThunk<void> =>\n  (dispatch, getState) => {\n    const { ui } = getState();\n    const dishId = ui.selectedDishId;\n\n    if (dishId) {\n      dispatch(dishesSlice.actions.addIngredient({\n        dishId,\n        ingredientId,\n      }));\n    }\n  };\n\nexport const closeIngredientsStore = (): TThunk<void> =>\n  (dispatch, getState) => {\n    const { ui } = getState();\n    const dishId = ui.selectedDishId;\n\n    if (dishId) {\n      dispatch(uiSlice.actions.closeIngredientsStore());\n    }\n  };\n\nexport const chooseClient = (\n  clientId: string,\n  recipeId: string,\n  event: SyntheticEvent,\n): TThunk<void> =>\n  (dispatch, getState) => {\n    const { ui, recipes, dishes, profile } = getState();\n    const dishId = ui.selectedDishId;\n\n    if (profile.lives <= 0) {\n      return;\n    }\n\n    if (dishId) {\n      const areEqual = areIngredientsEqual(\n        recipes.ingredients[recipeId].slice(),\n        dishes.ingredients[dishId].slice(),\n      );\n\n      batch(() => {\n        if (areEqual) {\n          dispatch(clientsSlice.actions.setOk({\n            clientId,\n            dishId,\n          }));\n        }\n\n        if (!areEqual) {\n          dispatch(clientsSlice.actions.setKo({\n            clientId,\n            dishId,\n          }));\n        }\n\n        setTimeout(() => dispatch(checkForEndgame()), 1500);\n        dispatch(checkRemoveClientTable(clientId));\n      });\n\n      clientWiggleEffect(`.client__${clientId}`);\n    }\n\n    if (!dishId) {\n      btnEffect(() =>\n        dispatch(uiSlice.actions.showRecipes({\n          recipeId,\n        }))\n      )(event);\n    }\n  };\n\nconst checkForEndgame = (): TThunk<void> =>\n  (dispatch, getState) => {\n    const { profile, game, levels, tables } = getState();\n\n    batch(() => {\n      // Lose.\n      if (profile.lives <= 0) {\n        dispatch(gameSlice.actions.selectStatus({ status: GameStatus.LOSE_STOP }));\n        dispatch(uiSlice.actions.selectVisibleModalType({\n          modalType: VisibleModalType.RESTARTPAGE,\n        }));\n      }\n\n      const level = levels.data[profile.levelId];\n\n      // Win.\n      if (\n        profile.lives > 0\n        && game.tables === level.maxTables\n        && !tables.ids.length\n      ) {\n        const nextLevel = profile.levelId < Object.keys(levels.data).length\n          ? profile.levelId + 1\n          : null;\n\n        if (nextLevel) {\n          dispatch(levelsSlice.actions.unlockLevel({\n            level: nextLevel\n          }));\n          dispatch(profileSlice.actions.selectLevel({\n            levelId: nextLevel\n          }));\n        }\n\n        dispatch(gameSlice.actions.selectStatus({ status: GameStatus.WIN_STOP }));\n        dispatch(uiSlice.actions.selectVisibleModalType({\n          modalType: VisibleModalType.RESTARTPAGE,\n        }));\n      }\n    });\n  }\n\nconst checkRemoveClientTable = (clientId: string): TThunk<void> =>\n  (dispatch, getState) => {\n    const { clients, tables } = getState();\n\n    const tableId = clients.tables[clientId];\n    const tableClientsIds = tables.clients[tableId];\n    const isTableAttended = tableClientsIds\n      .every(id => clients.data[id].status !== ClientStatus.WIP);\n\n    if (isTableAttended) {\n      const coins = tableClientsIds.reduce((prev, id) => {\n        const client = clients.data[id];\n        return prev + (client.status === ClientStatus.OK ? client.coins : 0);\n      }, 0);\n\n      if (coins) {\n        dispatch(profileSlice.actions.increseCoins({ coins }));\n      }\n\n      tableHideEffect(`.table__${tableId}`, () => {\n        dispatch(tablesSlice.actions.removeTable({\n          tableId,\n        }));\n      });\n    }\n  }\n\n\nexport const clearDish = (): TThunk<void> =>\n  (dispatch, getState) => {\n    const { ui } = getState();\n    const dishId = ui.selectedDishId;\n\n    if (dishId) {\n      dispatch(dishesSlice.actions.clear({\n        dishId,\n      }));\n    }\n  };\n\nexport const startgameLavel = (levelId: number): TThunk<void> =>\n  (dispatch, getState) => {\n    const { levels } = getState();\n    const level = levels.data[levelId];\n\n    dispatch(gameSlice.actions.startgame({\n      currentTime,\n      levelId,\n      lives: level.lives,\n      dishesIds: Array.from(new Array(level.dishes))\n        .map(() => uuid()),\n    }));\n  };\n\nexport const createTable = (): TThunk<void> =>\n  (dispatch, getState) => {\n    const { levels, profile, recipes } = getState();\n\n    const levelId = profile.levelId;\n    const level: TLevel = levels.data[levelId];\n    const tableId = uuid();\n    const clientsRandom = level.randomTables\n      ? Math.floor(Math.random() * level.maxClients) + 1\n      : level.maxClients;\n    const clientsIds = Array.from(new Array(clientsRandom))\n      .map(() => uuid());\n\n    const clients: TClients = {\n      data: {},\n      recipes: {},\n      ids: [],\n      tables: {},\n    };\n\n    clientsIds.forEach(clientId => {\n      const recipeRandom = Math.floor(Math.random() * levels.recipes[levelId].length);\n      const recipeId = levels.recipes[levelId][recipeRandom];\n      const recipeIngredients = recipes.ingredients[recipeId];\n\n      clients.data[clientId] = {\n        id: clientId,\n        status: ClientStatus.WIP,\n        coins: 100,\n        createdAt: currentTime,\n        liveTime: currentTime\n          + (recipeIngredients.length * level.timePerIngredient),\n      };\n\n      clients.recipes[clientId] = recipeId;\n\n      clients.ids.push(clientId);\n\n      clients.tables[clientId] = tableId;\n    });\n\n    const tables: TTables = {\n      data: {\n        [tableId]: {\n          id: tableId,\n        },\n      },\n      clients: {\n        [tableId]: clientsIds,\n      },\n      ids: [tableId],\n    };\n\n    const maxLiveTime = Math.max(...Object.values(clients.data)\n      .map(client => client.liveTime - currentTime));\n\n    dispatch(tablesSlice.actions.addTable({\n      tables,\n      clients,\n      nextTableTime: currentTime + (maxLiveTime * 0.65),\n    }));\n\n    tableShowEffect(`.table__${tableId}`);\n  };\n\nconst checkRemoveClients = (): TThunk<void> =>\n  (dispatch, getState) => {\n    const { clients, profile } = getState();\n\n    const clientsIdsToRemove = Object.values(clients.data)\n      .filter(client =>\n        client.status === ClientStatus.WIP\n        && currentTime >= client.liveTime)\n      .map(client => client.id);\n\n    if (clientsIdsToRemove.length) {\n      batch(() => {\n        dispatch(clientsSlice.actions.updateStatuses({\n          status: ClientStatus.KO,\n          clientIds: clientsIdsToRemove,\n        }));\n\n        clientWiggleEffect(clientsIdsToRemove.map(c => `.client__${c}`).join(','));\n\n        dispatch(profileSlice.actions.decreaseLives({\n          lives: clientsIdsToRemove.length > profile.lives\n            ? profile.lives\n            : clientsIdsToRemove.length,\n        }));\n\n        if (profile.lives - clientsIdsToRemove.length <= 0) {\n          setTimeout(() => dispatch(checkForEndgame()), 1500);\n        }\n\n        clientsIdsToRemove.forEach(clientId => {\n          const { clients } = getState();\n\n          if (clients.data[clientId]) {\n            dispatch(checkRemoveClientTable(clientId));\n          }\n        });\n      });\n    }\n  };\n\nexport const togglePausegame = (): TThunk<void> =>\n  (dispatch, getState) => {\n    const { ui, game } = getState();\n\n    dispatch(gameSlice.actions.togglePausegame({\n      status: game.status === GameStatus.PAUSE\n        ? GameStatus.PLAY\n        : GameStatus.PAUSE,\n      modalType: ui.modalType === VisibleModalType.NONE\n        ? VisibleModalType.RESTARTPAGE\n        : VisibleModalType.NONE,\n    }));\n  };\n\nwindow.setInterval(() => {\n  const { game, profile, levels } = store.getState();\n\n  if (game.status !== GameStatus.PLAY) {\n    return;\n  }\n\n  currentTime += 400;\n\n  store.dispatch(timerSlice.actions.set({\n    currentTime,\n  }));\n\n  store.dispatch(checkRemoveClients());\n\n  // Start create table\n  const level = levels.data[profile.levelId];\n\n  if (\n    profile.lives > 0\n    && game.tables !== level.maxTables\n    && currentTime >= game.nextTableTime\n  ) {\n    store.dispatch(createTable());\n  }\n  // End create table\n}, 400);\n","import React, { FC } from 'react';\nimport classnames from 'classnames';\n\nimport './IngredientsStore.css';\nimport '../../ingredient.css';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { TState, VisibleModalType } from '../../types';\nimport { selectLevelIngredientsIds } from '../../selectors';\nimport { chooseIngredient, closeIngredientsStore } from '../../actions';\nimport { btnEffect } from '../../libs/btnEffect';\n\nconst mapStateToProps =\n  (state: TState) => ({\n    ingredientsIds: selectLevelIngredientsIds(state),\n    isVisible:\n      state.ui.modalType === VisibleModalType.INGREDIENTS_STORE,\n  });\n\nconst mapDispatchToProps = {\n  chooseIngredient,\n  closeIngredientsStore,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst ingredientsList =\n  (\n    ingredientsIds: string[],\n    chooseIngredient: (ingredientId: string) => void,\n  ) =>\n    ingredientsIds.map(ingredientId =>\n      <div\n        className={`ingredients-store__ingredient ingredient__${ingredientId}`}\n        key={ingredientId}\n        onClick={btnEffect(() => chooseIngredient(ingredientId))}>\n      </div>\n    );\n\n\nconst ingredientsStoreClass =\n  (isVisible: boolean) =>\n    classnames(\n      'ingredients-store',\n      { 'ingredients-store--visible': isVisible },\n    );\n\nconst IngredientsStore: FC<TProps> =\n  ({\n    ingredientsIds,\n    isVisible,\n    chooseIngredient,\n    closeIngredientsStore,\n  }) =>\n    isVisible\n      ? <div\n        className={ingredientsStoreClass(isVisible)}>\n        <div className='ingredients-store__list'>\n          {ingredientsList(ingredientsIds, chooseIngredient)}\n        </div>\n        <div className='ingredients-store__controls'>\n          <div\n            className='ingredients-store__close-btn'\n            onClick={btnEffect(closeIngredientsStore)}></div>\n        </div>\n      </div>\n      : null;\n\nexport default connector(IngredientsStore);\n","import React, { FC, Fragment } from 'react';\nimport classnames from 'classnames';\n\nimport './Recipes.css';\nimport '../../ingredient.css';\nimport '../../recipe.css';\nimport { TState, TIngredient, VisibleModalType } from '../../types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { selectClientIngredients } from '../../selectors';\nimport uiSlice from '../../slices/uiSlice';\nimport { btnEffect } from '../../libs/btnEffect';\n\nconst mapStateToProps = (state: TState) => ({\n  ingredients: selectClientIngredients(state),\n  recipeId: state.ui.selectedRecipeId,\n  isVisible: state.ui.modalType === VisibleModalType.RECIPES,\n});\n\nconst mapDispatchToProps = {\n  hideRecipes: () => uiSlice.actions.selectVisibleModalType({\n    modalType: VisibleModalType.NONE,\n  }),\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst ingredientsList =\n  (ingredients: TIngredient[]) =>\n    ingredients.map((ingredient, index) =>\n      <Fragment key={`${ingredient.id}-${index}`}>\n        <div\n          className={`recipes__ingredient ingredient__${ingredient.id}`}>\n        </div>\n        {index !== ingredients.length - 1\n          ? <div className='recipes__symbol'>+</div>\n          : null\n        }\n      </Fragment>);\n\nconst recipesClass =\n  (isVisible: boolean) =>\n    classnames(\n      'recipes',\n      { 'recipes--visible': isVisible },\n    );\n\nconst Recipes: FC<TProps> =\n  ({ ingredients, recipeId, isVisible, hideRecipes }) =>\n    isVisible\n      ? <div className={recipesClass(isVisible)}>\n        <div className='recipes__list'>\n          {ingredientsList(ingredients)}\n          <div className='recipes__symbol'>=</div>\n          <div className={`recipes__recipe recipe__${recipeId}`}></div>\n        </div>\n        <div className='recipes__controls'>\n          <div\n            className='recipes__close-btn'\n            onClick={btnEffect(hideRecipes)}></div>\n        </div>\n      </div>\n      : null;\n\nexport default connector(Recipes);\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport './Profile.css';\nimport { TState } from '../../types';\n\nconst mapStateToProps = (state: TState) => ({\n  lives: state.profile.lives,\n  coins: state.profile.coins,\n  levelId: state.profile.levelId,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst Profile: FC<TProps> =\n  ({ lives, coins, levelId }) =>\n    <div className='profile'>\n      <div className='profile__level'>\n        Lv {levelId}\n      </div>\n      <div className='profile__lives'>\n        <div className='profile__lives__logo'></div>\n        x {lives}\n      </div>\n      <div className='profile__coins'>\n        <div className='profile__coins__logo'></div>\n        {coins}\n      </div>\n    </div>;\n\nexport default connector(Profile);\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport './Clock.css';\nimport { TState } from '../../types';\n\ntype TOwnProps = {\n  createdAt: number,\n  liveTime: number,\n  isWaiting: boolean,\n};\n\nconst mapStateToProps =\n  (state: TState, ownProps: TOwnProps) => ({\n    currentTime: ownProps.isWaiting\n      ? state.timer.currentTime\n      : ownProps.liveTime,\n  });\n\nconst connector = connect(mapStateToProps);\n\ntype TProps = ConnectedProps<typeof connector> & TOwnProps;\n\nconst getStyle = (\n  liveTime: number,\n  createdAt: number,\n  currentTime: number,\n  isWaiting: boolean,\n) => {\n  const perc = isWaiting\n    ? (currentTime - createdAt) * 100 / (liveTime - createdAt)\n    : 100;\n\n  return {\n    strokeDasharray: `${perc} 100`,\n  };\n};\n\nconst Clock: FC<TProps> =\n  ({ createdAt, liveTime, currentTime, isWaiting }) =>\n    <svg\n      className='clock'\n      viewBox='0 0 64 64'\n      transform='rotate(-90)'>\n      <circle\n        r='25%'\n        cx='50%'\n        cy='50%'\n        style={getStyle(liveTime, createdAt, currentTime, isWaiting)}>\n      </circle>\n    </svg>;\n\nexport default connector(Clock);\n","import React, { FC, SyntheticEvent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport classnames from 'classnames';\n\nimport './Client.css';\nimport '../../recipe.css';\nimport { TState, ClientStatus, TClient } from '../../types';\nimport { selectClient, selectClientRecipe } from '../../selectors';\nimport { chooseClient } from '../../actions';\nimport Clock from '../clock/Clock';\n\ntype TOwnProps = {\n  clientId: string,\n};\n\nconst mapStateToProps =\n  (state: TState, ownProps: TOwnProps) => ({\n    client: selectClient(state, ownProps.clientId),\n    recipeId: selectClientRecipe(state, ownProps.clientId),\n  });\n\nconst mapDispatchToProps = { chooseClient };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector> & TOwnProps;\n\nconst onClickAttr = (\n  client: TClient,\n  recipeId: string,\n  chooseClient: (arg0: string, arg1: string, arg3: SyntheticEvent) => void\n) =>\n  client.status === ClientStatus.WIP\n    ? { onClick: (event: SyntheticEvent) => chooseClient(client.id, recipeId, event) }\n    : {};\n\nconst clientStatusClass = (status: ClientStatus) =>\n  classnames({\n    'client__ok': status === ClientStatus.OK,\n    'client__ko': status === ClientStatus.KO,\n  });\n\nconst clientStatusEl = (status: ClientStatus) =>\n  status !== ClientStatus.WIP\n    ? <div className={clientStatusClass(status)}></div>\n    : null;\n\nconst clientRecipeEl = (status: ClientStatus, recipeId: string) =>\n  status === ClientStatus.WIP\n    ? <div className={`client__recipe recipe__${recipeId}`}></div>\n    : null;\n\nconst Client: FC<TProps> =\n  ({ client, recipeId, chooseClient, clientId }) =>\n    <div\n      {...onClickAttr(client, recipeId, chooseClient)}\n      className='client'>\n      <div className='client__cloud'></div>\n      {clientStatusEl(client.status)}\n      {clientRecipeEl(client.status, recipeId)}\n      <div\n        className={`client__client client__${clientId}`}></div>\n      <Clock\n        isWaiting={client.status === ClientStatus.WIP}\n        createdAt={client.createdAt}\n        liveTime={client.liveTime} />\n    </div>;\n\nexport default connector(Client);\n","export default function areIngredientsEqual(\n  ingrediensIds0: string[],\n  ingredientsIds1: string[],\n) {\n  if (ingrediensIds0.length !== ingredientsIds1.length) {\n    return false;\n  }\n\n  const orederdIngredienstIds0 = ingrediensIds0.sort();\n  const orederdIngredienstIds1 = ingredientsIds1.sort();\n\n  return orederdIngredienstIds0\n    .every((IngredientId, index) =>\n      IngredientId === orederdIngredienstIds1[index]);\n}\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport './Table.css';\nimport { TState } from '../../types';\nimport { selectClients } from '../../selectors';\nimport Client from '../client/Client';\n\ntype TOwnProps = {\n  tableId: string,\n};\n\nconst mapStateToProps =\n  (state: TState, ownProps: TOwnProps) => ({\n    clients: selectClients(state, ownProps.tableId),\n  });\n\nconst connector = connect(mapStateToProps);\n\ntype TProps = ConnectedProps<typeof connector> & TOwnProps;\n\nconst clientsList = (clients: string[]) =>\n  clients.map(clientId =>\n    <Client\n      key={clientId}\n      clientId={clientId} />);\n\nconst Table: FC<TProps> =\n  ({ clients, tableId }) =>\n    <div className={`table table__${tableId}`}>\n      {clientsList(clients)}\n    </div>;\n\nexport default connector(Table);\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport './Diner.css';\nimport { TState } from '../../types';\nimport { selectTablesIds } from '../../selectors';\nimport Table from '../table/Table';\n\nconst mapStateToProps = (state: TState) => ({\n  tablesIds: selectTablesIds(state),\n});\n\nconst connector = connect(mapStateToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst tablesList = (tablesIds: string[]) =>\n  tablesIds.map(tableId =>\n    <Table\n      tableId={tableId}\n      key={tableId} />);\n\nconst Diner: FC<TProps> =\n  ({ tablesIds }) =>\n    <div className='diner'>\n      {tablesList(tablesIds)}\n    </div>;\n\nexport default connector(Diner);\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport classnames from 'classnames';\n\nimport './Dish.css';\nimport '../../ingredient.css';\nimport '../../recipe.css';\nimport { TState, TIngredient } from '../../types';\nimport {\n  selectDish,\n  makeSelectIngredients,\n  makeSelectRecipeId,\n} from '../../selectors';\nimport { chooseDish } from '../../actions';\n\nconst maxIngredientsPerDish = 4;\n\ntype TOwnProps = {\n  dishId: string,\n};\n\nconst makeMapStateToProps = () => {\n  const selectIngredients = makeSelectIngredients();\n  const selectRecipeId = makeSelectRecipeId();\n\n  return (state: TState, ownProps: TOwnProps) => ({\n    dish: selectDish(state, ownProps.dishId),\n    ingredients: selectIngredients(state, ownProps.dishId),\n    recipeId: selectRecipeId(state, ownProps.dishId),\n  });\n};\n\nconst mapDispatchToProps = { chooseDish };\n\nconst connector = connect(makeMapStateToProps, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector> & TOwnProps;\n\nconst ingredientClass = (length: number, ingredientId: string) =>\n  classnames(\n    'dish__ingredient',\n    `ingredient__${ingredientId}`,\n    {\n      'dish__ingredient--main': length === 1,\n    }\n  );\n\nconst ingredientsList =\n  (ingredients: TIngredient[]) =>\n    ingredients\n      .slice(0, ingredients.length <= maxIngredientsPerDish ? ingredients.length : 3)\n      .map((ingredient, index) =>\n        <div\n          className={ingredientClass(ingredients.length, ingredient.id)}\n          key={`${ingredient.id}-${index}`}></div>);\n\nconst dishClass = (isSelected: boolean) =>\n  classnames(\n    'dish',\n    { 'dish--is-selected': isSelected }\n  );\n\nconst ingredientsEl = (\n  ingredients: TIngredient[],\n  maxIngredientsPerDish: number,\n) =>\n  <>\n    {ingredientsList(ingredients)}\n    {ingredients.length > maxIngredientsPerDish &&\n      <div className='dish__ellipsis'>...</div>}\n  </>;\n\nconst Dish: FC<TProps> =\n  ({\n    dish,\n    dishId,\n    ingredients,\n    chooseDish,\n    recipeId,\n  }) =>\n    <div\n      className={dishClass(dish.isSelected)}\n      onClick={(event) => chooseDish(dishId, event)}>\n      {\n        recipeId\n          ? <div className={`dish__recipe recipe__${recipeId}`}></div>\n          : ingredientsEl(ingredients, maxIngredientsPerDish)\n      }\n    </div>;\n\nexport default connector(Dish);\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport './Kitchen.css';\nimport { TState } from '../../types';\nimport { selectDishesIds } from '../../selectors';\nimport { clearDish } from '../../actions';\nimport Dish from '../dish/Dish';\nimport { btnEffect } from '../../libs/btnEffect';\n\nconst mapStateToProps = (state: TState) => ({\n  dishesIds: selectDishesIds(state),\n});\n\nconst mapDispatchToProps = { clearDish };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst dishesList = (dishesIds: string[]) =>\n  dishesIds.map(dishId =>\n    <Dish\n      dishId={dishId}\n      key={dishId} />);\n\nconst Kitchen: FC<TProps> =\n  ({ dishesIds, clearDish }) =>\n    <div className='kitchen'>\n      <div\n        className='kitchen__trash-btn'\n        onClick={btnEffect(clearDish)}></div>\n      {dishesList(dishesIds)}\n    </div>;\n\nexport default connector(Kitchen);\n","import React, { FC, useEffect, useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport './Combo.css';\nimport { TState } from '../../types';\nimport { comboEffect } from '../../libs/btnEffect';\n\nconst mapStateToProps =\n  (state: TState) => ({\n    combo: state.game.combo,\n  });\n\nconst connector = connect(mapStateToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst comboTxt = (combo: number) => {\n  if (combo <= 2) {\n    return 'Bad';\n  } else if (combo <= 4) {\n    return 'Good'\n  } else if (combo <= 6) {\n    return 'Great'\n  } else {\n    return 'Excellent';\n  }\n}\n\nconst Combo: FC<TProps> =\n  ({ combo }) => {\n    const el = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      if (!el.current) {\n        return;\n      }\n\n      if (combo === 0) {\n        return;\n      }\n\n      comboEffect(el.current);\n    }, [combo]);\n\n    return <div\n      className={`combo combo--${comboTxt(combo).toLowerCase()}`}\n      ref={el}>\n      <div className='combo__title'>{comboTxt(combo)}</div>\n      {\n        combo > 2\n          ? <div className='combo__count'>{combo - 2}</div>\n          : null\n      }\n    </div>\n  };\n\nexport default connector(Combo);\n","import React, { FC } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\n\nimport './Board.css';\nimport LogoSvg from '../logoSvg/LogoSvg.svg';\nimport Profile from '../profile/Profile';\nimport Diner from '../diner/Diner';\nimport Kitchen from '../kitchen/Kitchen';\nimport { togglePausegame } from '../../actions';\nimport { btnEffect } from '../../libs/btnEffect';\nimport Combo from '../combo/Combo';\n\nconst mapDispatchToProps = { togglePausegame };\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst Board: FC<TProps> =\n  ({ togglePausegame }) =>\n    <div className='board'>\n      <Profile />\n      <Combo />\n      <div className='board__body-container'>\n        <img\n          className='board__game-logo'\n          src={LogoSvg}\n          alt='' />\n        <Diner />\n        <div className='board__menu-ctrls'>\n          <div\n            className='board__pause-btn'\n            onClick={btnEffect(togglePausegame)}></div>\n        </div>\n      </div>\n      <Kitchen />\n    </div>;\n\nexport default connector(Board);\n","import React, { FC, useState, useEffect, memo } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport classnames from 'classnames';\n\nimport './Restartpage.css';\nimport { TState, VisibleModalType, TLevel, GameStatus } from '../../types';\nimport { startgameLavel, togglePausegame } from '../../actions';\nimport LogoSvg from '../logoSvg/LogoSvg.svg';\nimport { btnEffect } from '../../libs/btnEffect';\n\ntype TLevelsData = { [key: string]: TLevel };\n\nconst mapStateToProps =\n  (state: TState) => ({\n    currentLevelId: state.profile.levelId,\n    isVisible: state.ui.modalType === VisibleModalType.RESTARTPAGE,\n    isPaused: state.game.status === GameStatus.PAUSE,\n    isFirst: state.game.status === GameStatus.FIRST_STOP,\n    isStart: state.game.status === GameStatus.WIN_STOP\n      || state.game.status === GameStatus.FIRST_STOP,\n    isEndgame: state.game.status === GameStatus.WIN_STOP,\n    levelsNum: Object.keys(state.levels.data).length,\n    levels: state.levels.data,\n    coins: state.profile.coins,\n  });\n\nconst mapDispatchToProps = { startgameLavel, togglePausegame };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype TProps = ConnectedProps<typeof connector>;\n\nconst startpageClass =\n  (isVisible: boolean) =>\n    classnames(\n      'restartpage',\n      { 'restartpage--visible': isVisible },\n    );\n\nconst PrevLevelBtn: FC<{\n  setLocalLevelId: (arg0: number) => void,\n  localLevelId: number,\n}> = memo(({\n  setLocalLevelId,\n  localLevelId,\n}) => {\n  const onClick = () => setLocalLevelId(localLevelId - 1);\n  const onClickAttr = localLevelId > 1\n    ? { onClick: btnEffect(onClick) }\n    : {};\n\n  return <div\n    className='restartpage__prev-level-btn'\n    {...onClickAttr}></div>;\n});\n\nconst NextLevelBtn: FC<{\n  setLocalLevelId: (arg0: number) => void,\n  localLevelId: number,\n  levelsNum: number,\n}> = memo(({\n  setLocalLevelId,\n  localLevelId,\n  levelsNum,\n}) => {\n  const onClick = () => setLocalLevelId(localLevelId + 1);\n  const onClickAttr = localLevelId < levelsNum\n    ? { onClick: btnEffect(onClick) }\n    : {};\n\n  return <div\n    className='restartpage__next-level-btn'\n    {...onClickAttr}></div>;\n});\n\nconst playBtnClass = (\n  currentLevelId: number,\n  localLevelId: number,\n  isStart: boolean,\n) =>\n  classnames({\n    'restartpage__play-btn': currentLevelId !== localLevelId || isStart,\n    'restartpage__retry-btn': currentLevelId === localLevelId || !isStart,\n  });\n\nconst PlayBtn: FC<{\n  currentLevelId: number,\n  localLevelId: number,\n  levels: TLevelsData,\n  isStart: boolean,\n  startgameLavel: (arg: number) => void,\n}> = memo(({\n  currentLevelId,\n  localLevelId,\n  levels,\n  isStart,\n  startgameLavel,\n}) => {\n  const onClick = () => startgameLavel(localLevelId);\n\n  return !levels[localLevelId].isLock\n    ? <div\n      className={playBtnClass(currentLevelId, localLevelId, isStart)}\n      onClick={btnEffect(onClick)}></div>\n    : null;\n});\n\nconst LevelTxt: FC<{\n  levels: TLevelsData,\n  localLevelId: number,\n}> = memo(({\n  levels,\n  localLevelId,\n}) =>\n  <div className='restartpage__level'>\n    {levels[localLevelId].isLock ? '?' : localLevelId}\n  </div>);\n\nconst ResumeBtn: FC<{\n  isPaused: boolean,\n  currentLevelId: number,\n  localLevelId: number,\n  togglePausegame: () => void,\n}> = memo(({\n  isPaused,\n  currentLevelId,\n  localLevelId,\n  togglePausegame,\n}) =>\n  isPaused && currentLevelId === localLevelId\n    ? <div\n      className='restartpage__resume-btn'\n      onClick={btnEffect(togglePausegame)}></div>\n    : null);\n\nconst LogoGame: FC<{ isFirst: boolean }> = memo(({ isFirst }) =>\n  isFirst\n    ? <img\n      className='restartpage__game-logo'\n      src={LogoSvg}\n      alt='' />\n    : null);\n\nconst Coins: FC<{\n  coins: number, isEndgame: boolean\n}> = memo(({ coins, isEndgame }) =>\n  isEndgame\n    ? <div className='restartpage__coins'>\n      <div className='restartpage__coins__logo'></div>\n      <div className='restartpage__coins__txt'>{coins}</div>\n    </div>\n    : null);\n\nconst Startpage: FC<TProps> =\n  ({\n    isVisible,\n    currentLevelId,\n    levelsNum,\n    levels,\n    startgameLavel,\n    togglePausegame,\n    isPaused,\n    isFirst,\n    isStart,\n    isEndgame,\n    coins,\n  }) => {\n    const [localLevelId, setLocalLevelId]\n      = useState(currentLevelId);\n\n    useEffect(() => {\n      setLocalLevelId(currentLevelId);\n    }, [currentLevelId]);\n\n    return <div className={startpageClass(isVisible)}>\n      <LogoGame isFirst={isFirst} />\n      <Coins\n        coins={coins}\n        isEndgame={isEndgame} />\n      <div className='restartpage__level-ctrl'>\n        <PrevLevelBtn\n          setLocalLevelId={setLocalLevelId}\n          localLevelId={localLevelId} />\n        <LevelTxt\n          levels={levels}\n          localLevelId={localLevelId} />\n        <NextLevelBtn\n          setLocalLevelId={setLocalLevelId}\n          localLevelId={localLevelId}\n          levelsNum={levelsNum} />\n      </div>\n      <div className='restartpage__level-start'>\n        <PlayBtn\n          currentLevelId={currentLevelId}\n          localLevelId={localLevelId}\n          levels={levels}\n          isStart={isStart}\n          startgameLavel={startgameLavel} />\n        <ResumeBtn\n          isPaused={isPaused}\n          currentLevelId={currentLevelId}\n          localLevelId={localLevelId}\n          togglePausegame={togglePausegame} />\n      </div>\n    </div>;\n  };\n\nexport default connector(Startpage);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './variables.css';\nimport './reset.css';\nimport store from './store';\nimport IngredientsStore from './components/ingredientsStore/IngredientsStore';\nimport Recipes from './components/recipes/Recipes';\nimport Board from './components/board/Board';\nimport Restartpage from './components/restartpage/Restartpage';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Restartpage />\n    <Recipes />\n    <IngredientsStore />\n    <Board />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}